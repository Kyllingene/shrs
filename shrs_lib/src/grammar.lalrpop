use std::str::FromStr;
use crate::{ast, lexer};

grammar<'input>(text: &'input str);

extern {
    type Location = usize;
    type Error = lexer::Error;

    enum lexer::Token<'input> {

	"\n" => lexer::Token::NEWLINE,
	";" => lexer::Token::SEMI,
	"&" => lexer::Token::AMP,
	"|" => lexer::Token::PIPE,
	"`" => lexer::Token::BACKTICK,
	"=" => lexer::Token::EQUAL,
	"\\" => lexer::Token::BACKSLASH,
	"'" => lexer::Token::SINGLEQUOTE,
	"\"" => lexer::Token::DOUBLEQUOTE,
	"<" => lexer::Token::LESS,
	">" => lexer::Token::GREAT,

	"(" => lexer::Token::LPAREN,
	")" => lexer::Token::RPAREN,
	"{" => lexer::Token::LBRACE,
	"}" => lexer::Token::RBRACE,
	"!" => lexer::Token::BANG,

	"&&" => lexer::Token::AND_IF,
	"||" => lexer::Token::OR_IF,
	";;" => lexer::Token::DSEMI,

	"<<" => lexer::Token::DLESS,
	">>" => lexer::Token::DGREAT,
	"<&" => lexer::Token::LESSAND,
	">&" => lexer::Token::GREATAND,
	"<>" => lexer::Token::LESSGREAT,
	"<<-" => lexer::Token::DLESSDASH,
	">|" => lexer::Token::CLOBBER,

	"if" => lexer::Token::IF,
	"then" => lexer::Token::THEN,
	"else" => lexer::Token::ELSE,
	"elif" => lexer::Token::ELIF,
	"fi" => lexer::Token::FI,
	"do" => lexer::Token::DO,
	"done" => lexer::Token::DONE,

	"case" => lexer::Token::CASE,
	"esac" => lexer::Token::ESAC,
	"while" => lexer::Token::WHILE,
	"until" => lexer::Token::UNTIL,
	"for" => lexer::Token::FOR,
	"in" => lexer::Token::IN,

	"WORD" => lexer::Token::WORD(<&'input str>),
	"ASSIGNMENT_WORD" => lexer::Token::ASSIGNMENT_WORD(<&'input str>),
	"NAME" => lexer::Token::NAME(<&'input str>),
	"FNAME" => lexer::Token::FNAME(<&'input str>),
	"IO_NUMBER" => lexer::Token::IO_NUMBER(<&'input str>),
    
    }
}

pub Program: ast::Command<'input> = {
    Linebreak <cs:CompleteCommands> Linebreak => cs,
    Linebreak => ast::Command::None,
}

pub CompleteCommands: ast::Command<'input> = {
    <cs:CompleteCommands> NewlineList <c:CompleteCommand> => ast::Command::SeqList(Box::new(cs), Some(Box::new(c))), // double check seqlist is correct here
    <c:CompleteCommand> => c,
}

pub CompleteCommand: ast::Command<'input> = {
    <l:List> <s:SeperatorOp> => {
        match s {
	      ast::SeperatorOp::Amp => ast::Command::AsyncList(Box::new(l), None),
	      ast::SeperatorOp::Semi => ast::Command::SeqList(Box::new(l), None),
	} 
    },
    <l:List> => l,
}

pub List: ast::Command<'input> = {
    <l:List> <s:SeperatorOp> <a:AndOr> => {
        match s {
	      ast::SeperatorOp::Amp => ast::Command::AsyncList(Box::new(l), Some(Box::new(a))),
	      ast::SeperatorOp::Semi => ast::Command::SeqList(Box::new(l), Some(Box::new(a))),
	} 
    },
    <a:AndOr> => a,
}

pub AndOr: ast::Command<'input> = {
    <a:AndOr> "&&" Linebreak <p:Pipeline> => ast::Command::And(Box::new(a), Box::new(p)),
    <a:AndOr> "||" Linebreak <p:Pipeline> => ast::Command::Or(Box::new(a), Box::new(p)),
    <p:Pipeline> => p,
}

pub Pipeline: ast::Command<'input> = {
    "!" <ps:PipeSequence> => ast::Command::Not(Box::new(ps)),
    <ps:PipeSequence> => ps,
}

pub PipeSequence: ast::Command<'input> = {
    <ps:PipeSequence> "|" Linebreak <c:Command> => ast::Command::Pipeline(Box::new(ps), Box::new(c)),
    <c:Command> => c,
}

pub Command: ast::Command<'input> = {
    <s:SimpleCommand> => s,
    <c:CompoundCommand> => c,
    <f:FunctionDefinition> => f,
}

pub SimpleCommand: ast::Command<'input> = {
    <assigns: Assign*> <prefix: Redirect*> <words: "WORD"+> <suffix: Redirect*> => {
    	let redirects = prefix.into_iter().chain(suffix.into_iter()).collect();
	ast::Command::Simple { assigns, redirects, args: words.iter().map(|x| x.to_string()).collect::<Vec<_>>() }
    }
}

pub CompoundCommand: ast::Command<'input> = {
    <b:BraceGroup> => b,
    <s:Subshell> => ast::Command::Subshell(Box::new(s)),
    <i:IfClause> => i,
    <w:WhileClause> => w,
    <u:UntilClause> => u,
    <f:ForClause> => f,
    <c:CaseClause> => c,
}

// TODO use FNAME token
pub FunctionDefinition: ast::Command<'input> = <fname:"WORD"> "(" ")" Linebreak <body:FunctionBody> => ast::Command::Fn { fname, body: Box::new(body) };

pub FunctionBody: ast::Command<'input> = {
    <c:CompoundCommand> => c,
}

// BRACE GROUP

pub BraceGroup: ast::Command<'input> = "{" <c:CompoundList> "}" => c;

// SUBSHELL

pub Subshell: ast::Command<'input> = {
    "(" <c:CompoundList> ")" => c,
}

pub CompoundList: ast::Command<'input> = {
    Linebreak <t:Term> => t,
    Linebreak <t:Term> <s:Seperator> => {
	match s {
	      None => t,
	      Some(ast::SeperatorOp::Amp) => ast::Command::AsyncList(Box::new(t), None),
	      Some(ast::SeperatorOp::Semi) => ast::Command::SeqList(Box::new(t), None),
	}
    }
}

pub Term: ast::Command<'input> = {
    <t:Term> <s:Seperator> <a:AndOr> => {
	match s {
	      None => t,
	      Some(ast::SeperatorOp::Amp) => ast::Command::AsyncList(Box::new(t), Some(Box::new(a))),
	      Some(ast::SeperatorOp::Semi) => ast::Command::SeqList(Box::new(t), Some(Box::new(a))),
	}
    },
    <a:AndOr> => a,
}

// IF CLAUSE

pub IfClause: ast::Command<'input> = {
    "if" <cond:CompoundList> "then" <body:CompoundList> <mut elifs:ElifBody*> <else_part:ElseBody?> "fi" => {

	let mut conds = vec![
	    ast::Condition {
		cond: Box::new(cond),
		body: Box::new(body),
	    }
	];
	conds.append(&mut elifs);
	// TODO prob can be done nicer
	let else_part = match else_part {
	    Some(else_part) => Some(Box::new(else_part)),
	    None => None,
	};
	ast::Command::If {
	    conds,
	    else_part,
	}
    }
}

pub ElifBody: ast::Condition<'input> = "elif" <cond:CompoundList> "then" <body:CompoundList> => ast::Condition { cond: Box::new(cond), body: Box::new(body) };
pub ElseBody: ast::Command<'input> = "else" <body:CompoundList> => body;

// WHILE/UNTIL CLAUSE

pub WhileClause: ast::Command<'input> = {
    "while" <cond:CompoundList> <d:DoGroup> => ast::Command::While { cond: Box::new(cond), body: Box::new(d) },
}

pub UntilClause: ast::Command<'input> = {
    "until" <cond:CompoundList> <d:DoGroup> => ast::Command::Until { cond: Box::new(cond), body: Box::new(d) },
}

// FOR CLAUSE

// TODO actually use "NAME" token
pub ForClause: ast::Command<'input> = {
    "for" <name: "WORD"> <d:DoGroup> => ast::Command::For { name, wordlist: vec![], body: Box::new(d) },
    "for" <name: "WORD"> <s:SequentialSep> <d:DoGroup> => ast::Command::For { name, wordlist: vec![], body: Box::new(d) },
    "for" <name: "WORD"> Linebreak "in" <wordlist: "WORD"*> <s:SequentialSep> <d:DoGroup> => ast::Command::For { name, wordlist, body: Box::new(d) },
}

// CASE CLAUSE

pub CaseClause: ast::Command<'input> = {
    "case" <w: "WORD"> Linebreak "in" Linebreak <c:CaseList> "esac" => ast::Command::Case { word: w, arms: c },
    "case" <w: "WORD"> Linebreak "in" Linebreak <c:CaseListNs> "esac" => ast::Command::Case { word: w, arms: c },
    "case" <w: "WORD"> Linebreak "in" Linebreak "esac" => ast::Command::Case { word: w, arms: vec![] },
}

pub CaseListNs: Vec<ast::CaseArm<'input>> = <mut cs:CaseItem*> <c:CaseItemNs> => {
    cs.push(c);
    cs
};
pub CaseList: Vec<ast::CaseArm<'input>> = <cs:CaseItem+> => cs;

pub CaseItemNs: ast::CaseArm<'input> = {
    "("? <p:Pattern> ")" Linebreak => ast::CaseArm { pattern: p, body: Box::new(ast::Command::None) },
    "("? <p:Pattern> ")" <c:CompoundList> => ast::CaseArm { pattern: p, body: Box::new(c) },
}
pub CaseItem: ast::CaseArm<'input> = {
    "("? <p:Pattern> ")" Linebreak ";;" Linebreak => ast::CaseArm { pattern: p, body: Box::new(ast::Command::None) },
    "("? <p:Pattern> ")" <c:CompoundList> ";;" Linebreak => ast::CaseArm { pattern: p, body: Box::new(c) },
}

pub Pattern: Vec<&'input str> = {
    <w: "WORD"> => vec![w],
    <mut p:Pattern> "|" <w: "WORD"> => {
    	p.push(w);
	p
    }
}

pub DoGroup: ast::Command<'input> = "do" <body:CompoundList> "done" => body;

pub Redirect: ast::Redirect<'input> = {
    <n: "IO_NUMBER"?> "<"  <file: "WORD"> => ast::Redirect { n: n.and_then(|x| str::parse::<usize>(x).ok()), file, mode: ast::RedirectMode::Read },
    <n: "IO_NUMBER"?> ">"  <file: "WORD"> => ast::Redirect { n: n.and_then(|x| str::parse::<usize>(x).ok()), file, mode: ast::RedirectMode::Write },
    <n: "IO_NUMBER"?> "<<" <file: "WORD"> => ast::Redirect { n: n.and_then(|x| str::parse::<usize>(x).ok()), file, mode: ast::RedirectMode::ReadAppend },
    <n: "IO_NUMBER"?> ">>" <file: "WORD"> => ast::Redirect { n: n.and_then(|x| str::parse::<usize>(x).ok()), file, mode: ast::RedirectMode::WriteAppend },
    <n: "IO_NUMBER"?> "<&" <file: "WORD"> => ast::Redirect { n: n.and_then(|x| str::parse::<usize>(x).ok()), file, mode: ast::RedirectMode::ReadDup },
    <n: "IO_NUMBER"?> ">&" <file: "WORD"> => ast::Redirect { n: n.and_then(|x| str::parse::<usize>(x).ok()), file, mode: ast::RedirectMode::WriteDup },
    <n: "IO_NUMBER"?> "<>" <file: "WORD"> => ast::Redirect { n: n.and_then(|x| str::parse::<usize>(x).ok()), file, mode: ast::RedirectMode::ReadWrite },
}

pub Assign: ast::Assign<'input> = <var:"WORD"> "=" <val:"WORD"> => ast::Assign { var, val };

pub Linebreak: () = NewlineList? => ();
pub NewlineList: () = "\n"+ => ();
pub Seperator: Option<ast::SeperatorOp> = {
    <s:SeperatorOp> Linebreak => Some(s),
    NewlineList => None,
}
pub SeperatorOp: ast::SeperatorOp = {
    "&" => ast::SeperatorOp::Amp,
    ";" => ast::SeperatorOp::Semi,
}
pub SequentialSep: () = {
    ";" Linebreak => (),
    NewlineList => (),
}
