use std::str::FromStr;
use crate::ast;

grammar;

pub PipeSequence: ast::Command = {
    <p:PipeSequence> "|" "\n"* <s:Simple> => ast::Command::Pipeline(Box::new(p), Box::new(s)),
    <s:Simple> => s,
}

pub Simple: ast::Command = {
    <prefix: Redirect*> <words: CommandWord+> <suffix: Redirect*> => {
    	let redirects = prefix.into_iter().chain(suffix.into_iter()).collect();
	ast::Command::Simple { redirects, args: words }
    }
}

pub Redirect: ast::Redirect = {
    <n: IONumber?> "<"  <file: Filename> => ast::Redirect { n, file, mode: ast::RedirectMode::Read },
    <n: IONumber?> ">"  <file: Filename> => ast::Redirect { n, file, mode: ast::RedirectMode::Read },
    <n: IONumber?> "<<" <file: Filename> => ast::Redirect { n, file, mode: ast::RedirectMode::Read },
    <n: IONumber?> ">>" <file: Filename> => ast::Redirect { n, file, mode: ast::RedirectMode::Read },
    <n: IONumber?> "<&" <file: Filename> => ast::Redirect { n, file, mode: ast::RedirectMode::Read },
    <n: IONumber?> ">&" <file: Filename> => ast::Redirect { n, file, mode: ast::RedirectMode::Read },
    <n: IONumber?> "<>" <file: Filename> => ast::Redirect { n, file, mode: ast::RedirectMode::Read },
}

pub IONumber: ast::IONumber = r"[0-9]+" => ast::IONumber(usize::from_str(<>).unwrap());
pub CommandWord: ast::Word = r"[a-zA-Z][a-zA-Z0-9]*" => ast::Word(<>.into());
pub Filename: ast::Filename = r"[a-zA-Z][a-zA-Z0-9]*" => ast::Filename(<>.into());