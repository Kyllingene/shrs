<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>shrs</title>
	<link href="https://mrpicklepinosaur.github.io/shrs/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://mrpicklepinosaur.github.io/shrs/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-05-01T18:10:00+00:00</updated>
	<id>https://mrpicklepinosaur.github.io/shrs/atom.xml</id>
	<entry xml:lang="en">
		<title>How to Contribute</title>
		<published>2021-05-01T18:10:00+00:00</published>
		<updated>2021-05-01T18:10:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/contributing/how-to-contribute/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/contributing/how-to-contribute/</id>
		<content type="html">&lt;p&gt;How you can help out with &lt;strong&gt;shrs&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;issue-tracking&quot;&gt;Issue tracking&lt;&#x2F;h3&gt;
&lt;p&gt;To see current feature status and what would needs to be done, look at the github actions kanban&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;users&#x2F;MrPicklePinosaur&#x2F;projects&#x2F;1&#x2F;views&#x2F;1&quot;&gt;shrs_lib: general project tasks&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;users&#x2F;MrPicklePinosaur&#x2F;projects&#x2F;2&#x2F;views&#x2F;1&quot;&gt;shrs_line: readline related tasks&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It is also helpful to fix &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MrPicklePinosaur&#x2F;shrs&#x2F;issues&quot;&gt;open issues&lt;&#x2F;a&gt;. If you are a new contributor you can use the &lt;code&gt;good first issue&lt;&#x2F;code&gt; label to filter issues.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;create-an-issue&quot;&gt;Create an issue&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MrPicklePinosaur&#x2F;shrs&#x2F;issues&#x2F;new?template=bug_report.md&quot;&gt;Bug report&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MrPicklePinosaur&#x2F;shrs&#x2F;issues&#x2F;new?template=feature_request.md&quot;&gt;Feature request&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MrPicklePinosaur&#x2F;shrs&#x2F;issues&#x2F;new?template=docs.md&quot;&gt;Documentation improvement&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Introduction</title>
		<published>2021-05-01T18:10:00+00:00</published>
		<updated>2021-05-01T18:10:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/contributing/introduction/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/contributing/introduction/</id>
		<content type="html">&lt;p&gt;Firstly, thanks for taking the time to contribute to &lt;strong&gt;shrs&lt;&#x2F;strong&gt;! This page will
go over starting steps to get you ready to create your first PR!.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;&#x2F;h2&gt;
&lt;p&gt;Since &lt;strong&gt;shrs&lt;&#x2F;strong&gt; is a rust project, you should have a working rust development
environment. You can get started with installing rust by using
&lt;a href=&quot;https:&#x2F;&#x2F;rustup.rs&#x2F;&quot;&gt;rustup&lt;&#x2F;a&gt; - the rust toolchain installer. You should also
install the nightly rust toolchain as some parts of the developer workflow
depends on nightly versions of rust tools.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;shrs&lt;&#x2F;strong&gt; uses &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;casey&#x2F;just&quot;&gt;just&lt;&#x2F;a&gt; as it&#x27;s command runner.
Install it in whatever method suitable for your system.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;build-the-example&quot;&gt;Build the example&lt;&#x2F;h2&gt;
&lt;p&gt;First we will get an example build of &lt;strong&gt;shrs&lt;&#x2F;strong&gt; up and running to take a tour of
all the features it offers.&lt;&#x2F;p&gt;
&lt;p&gt;Clone the repository and enter the project directory:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;MrPicklePinosaur&#x2F;shrs.git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; shrs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are a couple of special git hooks that are run on commit that or
especially for developers. These git hooks do things like lint your code and
format it. You can install them with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;just&lt;&#x2F;span&gt;&lt;span&gt; devsetup
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now to run the example shell&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;just
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You should now be throw into the example &lt;strong&gt;shrs&lt;&#x2F;strong&gt; shell, which shows off a good
number of the features &lt;strong&gt;shrs&lt;&#x2F;strong&gt; offers. Take some time to explore what the
shell is capable of. You can also examine &lt;code&gt;shrs_example&#x2F;src&#x2F;main.rs&lt;&#x2F;code&gt; to see the
actual configuration.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;build-your-own-shell&quot;&gt;Build your own shell&lt;&#x2F;h2&gt;
&lt;p&gt;Next is to use &lt;strong&gt;shrs&lt;&#x2F;strong&gt; as it was intended, as a library. To get started with
creating your own shell, take a look at the &lt;a href=&quot;..&#x2F;getting-started&#x2F;quick-start&quot;&gt;Quick Start&lt;&#x2F;a&gt; section.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tackle-an-issue&quot;&gt;Tackle an issue&lt;&#x2F;h2&gt;
&lt;p&gt;Once you are decently familiar with the &lt;strong&gt;shrs&lt;&#x2F;strong&gt; API, you can try to tackle an
actual issue and open your first PR! See the open issues, especially those
marked &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MrPicklePinosaur&#x2F;shrs&#x2F;labels&#x2F;good%20first%20issue&quot;&gt;good first issue&lt;&#x2F;a&gt;.
If you have any questions, don&#x27;t be afraid to reach out for help!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Pull Request Guidelines</title>
		<published>2021-05-01T18:10:00+00:00</published>
		<updated>2021-05-01T18:10:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/contributing/pull-request/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/contributing/pull-request/</id>
		<content type="html">&lt;p&gt;Branch name should be in the format &lt;code&gt;your-name&#x2F;description&lt;&#x2F;code&gt;. For example, if I were to implement tab completion I would create a branch called &lt;code&gt;pinosaur&#x2F;tab-completion&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Resources</title>
		<published>2021-05-01T18:10:00+00:00</published>
		<updated>2021-05-01T18:10:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/contributing/resources/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/contributing/resources/</id>
		<content type="html">&lt;h2 id=&quot;related-projects&quot;&gt;RELATED PROJECTS&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nuta&#x2F;nsh&quot;&gt;nsh&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nushell&#x2F;nushell&quot;&gt;nushell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hiking90&#x2F;rushell&quot;&gt;rushell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;resources&quot;&gt;RESOURCES&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokenrove&#x2F;build-your-own-shell&quot;&gt;build your own shell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pubs.opengroup.org&#x2F;onlinepubs&#x2F;9699919799&#x2F;utilities&#x2F;V3_chap02.html#tag_18_10&quot;&gt;grammar for posix shell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nixpulvis&#x2F;oursh&quot;&gt;oursh: rust shell using lalrpop&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;libc&#x2F;manual&#x2F;html_node&#x2F;Implementing-a-Shell.html&quot;&gt;gnu: implementing a job control shell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.nelhage.com&#x2F;2009&#x2F;12&#x2F;a-brief-introduction-to-termios&#x2F;&quot;&gt;A Brief Introduction to termios&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Introduction</title>
		<published>2021-05-01T18:10:00+00:00</published>
		<updated>2021-05-01T18:10:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/plugins/introduction/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/plugins/introduction/</id>
		<content type="html">&lt;p&gt;Plugins are a way to add addition functionality that may be opinionated or heavy to &lt;strong&gt;shrs&lt;&#x2F;strong&gt; in a modular fashion. &lt;strong&gt;shrs&lt;&#x2F;strong&gt; comes with a couple officially maintained plugins, which you can see in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MrPicklePinosaur&#x2F;shrs&#x2F;tree&#x2F;master&#x2F;plugins&quot;&gt;plugins directory&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Some examples of official plugins are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shrs_output_capture&lt;&#x2F;code&gt;: add a builtin called &lt;code&gt;again&lt;&#x2F;code&gt; that will output the result of the previous command&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;shrs_prompt_builder&lt;&#x2F;code&gt;: configure your prompt using the builder pattern&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Developing Plugins</title>
		<published>2021-05-01T18:10:00+00:00</published>
		<updated>2021-05-01T18:10:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/plugins/plugin-development/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/plugins/plugin-development/</id>
		<content type="html">&lt;p&gt;Making a plugin is as easy as implementing the &lt;code&gt;Plugin&lt;&#x2F;code&gt; trait. The &lt;code&gt;Plugin&lt;&#x2F;code&gt;
trait has an &lt;code&gt;init&lt;&#x2F;code&gt; method that is ran when the plugin is registered with the
&lt;code&gt;with_plugin&lt;&#x2F;code&gt; function. In the &lt;code&gt;init&lt;&#x2F;code&gt; method, you get the &lt;code&gt;shell&lt;&#x2F;code&gt; as context
and are free to modify it however you please, be it registering additional
hooks are adding a new builtin function.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;shrs::plugin::Plugin;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;MyPlugin;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Plugin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;PlugPlugin {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shell&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;shrs::ShellConfig) {
&lt;&#x2F;span&gt;&lt;span&gt;        shell.hooks.after_command.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;(after_command_hook);
&lt;&#x2F;span&gt;&lt;span&gt;        shell.builtins.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my_builtin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, MyBuiltin::new());
&lt;&#x2F;span&gt;&lt;span&gt;        shell.state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(MyState::new());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can see some of the official maintained plugins for an example on how
plugins are created.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Using Plugins</title>
		<published>2021-05-01T18:10:00+00:00</published>
		<updated>2021-05-01T18:10:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/plugins/using-plugins/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/plugins/using-plugins/</id>
		<content type="html">&lt;p&gt;Plugins are just regular crates that can be obtained from
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;&quot;&gt;crates.io&lt;&#x2F;a&gt;. Most &lt;strong&gt;shrs&lt;&#x2F;strong&gt; related crates have the prefix
&lt;code&gt;shrs_&lt;&#x2F;code&gt;. Simply add the crate to your project. To make &lt;strong&gt;shrs&lt;&#x2F;strong&gt; use the plugin,
it&#x27;s as using as using &lt;code&gt;with_plugin&lt;&#x2F;code&gt; when constructing the shell and pass in
the plugin.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; myshell = ShellBuilder::default()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_plugin&lt;&#x2F;span&gt;&lt;span&gt;(OutputCapturePlugin)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;myshell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Example Shell</title>
		<published>2021-05-01T08:20:00+00:00</published>
		<updated>2021-05-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/getting-started/example-shell/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/getting-started/example-shell/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MrPicklePinosaur&#x2F;shrs&#x2F;tree&#x2F;master&#x2F;shrs_example&quot;&gt;shrs_example&lt;&#x2F;a&gt;
is an example shell that makes use of the default features provided by
&lt;strong&gt;shrs&lt;&#x2F;strong&gt;. If you want a working shell quickly, you can simply install the
binary directly. However, the goal of &lt;strong&gt;shrs&lt;&#x2F;strong&gt; is to provide a fully
customizable shell that you can build yourself in rust, it is recommended that
you make your own project, which you can learn about in the Quick Start section.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Quick Start</title>
		<published>2021-05-01T08:20:00+00:00</published>
		<updated>2021-05-01T08:20:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/getting-started/quick-start/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/getting-started/quick-start/</id>
		<content type="html">&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;&#x2F;h3&gt;
&lt;p&gt;To get started with using &lt;strong&gt;shrs&lt;&#x2F;strong&gt;, you need a functioning Rust installation.
To install Rust, you can use the &lt;a href=&quot;https:&#x2F;&#x2F;rustup.rs&#x2F;&quot;&gt;rustup&lt;&#x2F;a&gt;, the Rust
toolchain installer. You will also need &lt;strong&gt;cargo&lt;&#x2F;strong&gt;, the Rust package manager.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, you will need some basic knowledge on how &lt;strong&gt;Rust&lt;&#x2F;strong&gt; works, if you are
still new to &lt;strong&gt;Rust&lt;&#x2F;strong&gt;, you can consult the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;book&#x2F;&quot;&gt;rust
book&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;create-cargo-project&quot;&gt;Create Cargo project&lt;&#x2F;h3&gt;
&lt;p&gt;Create your own shell project using cargo:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; init &amp;lt;project-name&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;project-name&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, add shrs as a dependency in your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;. shrs is still currently in pre-release, so there will be (hopefully) frequent updates. You can use the most recently published version with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shrs &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Otherwise, if you wish to be on the bleeding edge, you can depend directly on the master branch (beware that there may be unexpected bugs and breaking API changes on master):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shrs &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;MrPicklePinosaur&#x2F;shrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;building-the-shell&quot;&gt;Building the Shell&lt;&#x2F;h3&gt;
&lt;p&gt;Next, you can create a basic shell using all of the &lt;strong&gt;shrs&lt;&#x2F;strong&gt; provided defaults with the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;shrs::prelude::*;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; myshell = ShellBuilder::default()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    myshell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now to run the shell&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From here we can start digging into all the potential configuration and
extensions that can be applied to &lt;strong&gt;shrs&lt;&#x2F;strong&gt;. See the next section for details.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Introduction</title>
		<published>2021-05-01T08:00:00+00:00</published>
		<updated>2021-05-01T08:00:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/getting-started/introduction/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/getting-started/introduction/</id>
		<content type="html">&lt;p&gt;Welcome to &lt;strong&gt;shrs&lt;&#x2F;strong&gt;, the toolkit that will help you build and configure your
own shell in &lt;strong&gt;Rust&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;First of all &lt;strong&gt;shrs&lt;&#x2F;strong&gt; is NOT a shell, it is a library for YOU to build your own
shell. It is meant for those that have reached the limits of what can be
accomplished with just tinkering with the configuration files of pre-existing
shells and would like to go beyond and add experimental and wild features to
their own shells.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;quick-start&quot;&gt;Quick Start&lt;&#x2F;h3&gt;
&lt;p&gt;Get a working shell up and quickly: &lt;a href=&quot;..&#x2F;quick-start&#x2F;&quot;&gt;Quick Start →&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;go-further&quot;&gt;Go further&lt;&#x2F;h3&gt;
&lt;p&gt;Contributing and Help.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;contributing&quot;&gt;Contributing&lt;&#x2F;h3&gt;
&lt;p&gt;Find out how to contribute to Doks. &lt;a href=&quot;..&#x2F;..&#x2F;contributing&#x2F;how-to-contribute&#x2F;&quot;&gt;Contributing →&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;help&quot;&gt;Help&lt;&#x2F;h3&gt;
&lt;p&gt;Get help on Doks. &lt;a href=&quot;..&#x2F;..&#x2F;help&#x2F;faq&#x2F;&quot;&gt;Help →&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Completion</title>
		<published>2021-05-01T08:00:00+00:00</published>
		<updated>2021-05-01T08:00:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/line-config/completion/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/line-config/completion/</id>
		<content type="html">&lt;h2 id=&quot;rule-based&quot;&gt;Rule based&lt;&#x2F;h2&gt;
&lt;p&gt;The autocompletion system works on &lt;strong&gt;rules&lt;&#x2F;strong&gt;, which are pairs of &lt;strong&gt;predicates&lt;&#x2F;strong&gt;
and &lt;strong&gt;actions&lt;&#x2F;strong&gt;. Predicates help determine when an action is allowed to run,
and actions return the actual word list for the completion system to display to
the user.&lt;&#x2F;p&gt;
&lt;p&gt;There are a variety of commonly used builtin &lt;strong&gt;predicates&lt;&#x2F;strong&gt; to make write
completions a bit easier, these include &lt;code&gt;cmdname_pred&lt;&#x2F;code&gt; which checks that the
current completion is for a specific command name and &lt;code&gt;flag_pred&lt;&#x2F;code&gt; which checks
if we are attempting to complete a flag.&lt;&#x2F;p&gt;
&lt;p&gt;Similarly, there are also builtin &lt;strong&gt;actions&lt;&#x2F;strong&gt; like &lt;code&gt;cmdname_action&lt;&#x2F;code&gt; which
returns a list of all executables in the PATH, and &lt;code&gt;filename_action&lt;&#x2F;code&gt; which
outputs all the files in the current working directory.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;let-s-write-completion-rules-for-ls&quot;&gt;Let&#x27;s write completion rules for ls&lt;&#x2F;h3&gt;
&lt;p&gt;As an example, let&#x27;s write completion rules for the popular &lt;strong&gt;ls&lt;&#x2F;strong&gt; command.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s begin by initializing the &lt;code&gt;DefaultCompleter&lt;&#x2F;code&gt;. This comes with a couple of
sensible rules that most completion engines are expected to have, such as
autocompleting the command name from PATH:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;shrs::line::completion::*;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; completer = DefaultCompleter::default();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, we need to create a rule that will provide completion options for each of
the flags &lt;strong&gt;ls&lt;&#x2F;strong&gt; has. We can do this by writign a rule that first checks if the
user has already typed the command &lt;strong&gt;ls&lt;&#x2F;strong&gt; using &lt;code&gt;cmdname_pred&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ls_pred = Pred::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cmdname_pred&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, we also want to complete the flags for &lt;strong&gt;ls&lt;&#x2F;strong&gt;, so we need to also
check if we are currently typing a flag. We can use the provided &lt;code&gt;flag_pred&lt;&#x2F;code&gt;
for this. Notice how we can chain &lt;strong&gt;predicates&lt;&#x2F;strong&gt; with &lt;code&gt;.and()&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ls_pred = Pred::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cmdname_pred&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt;(flag_pred);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next we need to write the action that returns all the possible flags. An action
is just a function that takes in &lt;code&gt;CompletionCtx&lt;&#x2F;code&gt; and returns a list of possible
completions. &lt;code&gt;Completion&lt;&#x2F;code&gt; holds a bit more metadata that we will not touch for
now, but if we just wish to return a list of strings to the completer, we can
use the helper function &lt;code&gt;default_format&lt;&#x2F;code&gt; to generate default options for &lt;code&gt;Completion&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ls_action = Box::new(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;CompletionCtx| -&amp;gt; Vec&amp;lt;Completion&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;default_format&lt;&#x2F;span&gt;&lt;span&gt;(vec![&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-l&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;()])
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And with that we can register our first completion rule:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;completer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;(Rule::new(ls_pred, ls_action));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the end, our resulting code looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;shrs::line::completion::*;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; completer = DefaultCompleter::default();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ls_pred = Pred::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cmdname_pred&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt;(flag_pred);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ls_action = Box::new(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;CompletionCtx| -&amp;gt; Vec&amp;lt;Completion&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;default_format&lt;&#x2F;span&gt;&lt;span&gt;(vec![&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-l&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;()])
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;completer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;register&lt;&#x2F;span&gt;&lt;span&gt;(Rule::new(ls_pred, ls_action));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;coming-soon-declarative&quot;&gt;Coming soon: declarative&lt;&#x2F;h2&gt;
&lt;p&gt;The plugin &lt;code&gt;shrs_derive_completion&lt;&#x2F;code&gt; provides a declarative way to create
completions in the form of a procedual macro. If you are familiar with the
crate &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clap-rs&#x2F;clap&quot;&gt;clap&lt;&#x2F;a&gt; this should feel very familiar.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>History</title>
		<published>2021-05-01T08:00:00+00:00</published>
		<updated>2021-05-01T08:00:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/line-config/history/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/line-config/history/</id>
		<content type="html">&lt;p&gt;History is the ability for the shell to remember previous commands you have
typed, providing the ability to cycle back to re-run commands. Currently
&lt;strong&gt;shrs&lt;&#x2F;strong&gt; offers two history implementations, &lt;code&gt;DefaultHistory&lt;&#x2F;code&gt; and
&lt;code&gt;FileBackedHistory&lt;&#x2F;code&gt;. &lt;code&gt;DefaultHistory&lt;&#x2F;code&gt; is a very basic memory based history,
which means that your history will not persist if you close the shell. On the
other hand, &lt;code&gt;FileBackedHistory&lt;&#x2F;code&gt; uses an actual file on disk, providing
persistent completions.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example of using &lt;code&gt;FileBackedHistory&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Put the path to your history file here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; history_file = PathBuf::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; ... &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; history = FileBackedHistory::new(history_file).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;myline.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_history&lt;&#x2F;span&gt;&lt;span&gt;(history)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Keybindings</title>
		<published>2021-05-01T08:00:00+00:00</published>
		<updated>2021-05-01T08:00:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/line-config/keybindings/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/line-config/keybindings/</id>
		<content type="html">&lt;p&gt;Keybindings allow you to run arbitrary commands in respond to arbitrary key
presses in the shell. A common example is the ability to clear the terminal
when &lt;code&gt;Control+L&lt;&#x2F;code&gt; is pressed. How keybindings are represented is a bit more of an
internal detail and not very fun to write, so a macro is provided to make the
experience a bit better.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;ley keybinding = keybindings! {
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C-l&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; Command::new(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;myline.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_keybinding&lt;&#x2F;span&gt;&lt;span&gt;(keybinding);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The macro allows us to represent key combinations in terms of strings. You can
also include modifier keys (such as control and shift). Here are the supported modifiers:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Modifier&lt;&#x2F;th&gt;&lt;th&gt;Usage&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Shift&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;&amp;quot;S&amp;quot;&lt;&#x2F;code&gt; or &lt;code&gt;&amp;quot;Shift&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Alt&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;&amp;quot;A&amp;quot;&lt;&#x2F;code&gt; or &lt;code&gt;&amp;quot;Alt&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Control&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;&amp;quot;C&amp;quot;&lt;&#x2F;code&gt; or &lt;code&gt;&amp;quot;Ctrl&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Super&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;&amp;quot;Super&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Meta&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;&amp;quot;M&amp;quot;&lt;&#x2F;code&gt; or &lt;code&gt;&amp;quot;Meta&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Furthermore, there are also some keys that are hard to represent in a string,
so we use a special notation to denote them:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Key&lt;&#x2F;th&gt;&lt;th&gt;Usage&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Space&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;&amp;quot;&amp;lt;space&amp;gt;&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Backspace&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;&amp;quot;&amp;lt;backspace&amp;gt;&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Escape&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;&amp;quot;&amp;lt;esc&amp;gt;&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Enter&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;&amp;quot;&amp;lt;enter&amp;gt;&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Tab&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;&amp;quot;&amp;lt;tab&amp;gt;&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Here are some example keybinding strings:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Meaning&lt;&#x2F;th&gt;&lt;th&gt;Usage&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Control + Alt + q&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;&amp;quot;C-A-q&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Super + Space&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;&amp;quot;Super-&amp;lt;space&amp;gt;&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Alt + Tab&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;&amp;quot;A-&amp;lt;tab&amp;gt;&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Vi Mode</title>
		<published>2021-05-01T08:00:00+00:00</published>
		<updated>2021-05-01T08:00:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/line-config/vi/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/line-config/vi/</id>
		<content type="html">&lt;p&gt;Vi Mode is currently not configurable. In the future, hopefully custom commands
and keybindings will be supported.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Aliases</title>
		<published>2021-05-01T08:00:00+00:00</published>
		<updated>2021-05-01T08:00:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/shell-config/aliases/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/shell-config/aliases/</id>
		<content type="html">&lt;p&gt;Aliases can be specified as a key value pair of the alias name and the actual command it expands to. Keep in mind that aliases are not evaluated or syntax checked at time of definition, only during substitution. This means that it is possible to define aliases that are invalid commands.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; alias = Alias::from_iter([
&lt;&#x2F;span&gt;&lt;span&gt;    (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;l&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;    (&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;la&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ls -a&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;myshell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_alias&lt;&#x2F;span&gt;&lt;span&gt;(alias);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Environment Variables</title>
		<published>2021-05-01T08:00:00+00:00</published>
		<updated>2021-05-01T08:00:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/shell-config/env-vars/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/shell-config/env-vars/</id>
		<content type="html">&lt;p&gt;You can load all the current environment variables into &lt;strong&gt;shrs&lt;&#x2F;strong&gt; by using &lt;code&gt;env.load()&lt;&#x2F;code&gt;. This is useful in the case that you are launching your &lt;strong&gt;shrs&lt;&#x2F;strong&gt; shell from another shell, like &lt;strong&gt;bash&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; env = Env::new();
&lt;&#x2F;span&gt;&lt;span&gt;env.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;myshell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_env&lt;&#x2F;span&gt;&lt;span&gt;(env);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the case that the &lt;strong&gt;shrs&lt;&#x2F;strong&gt; shell is your login shell, or that you wish to define additional environment variables, you can do so by appending to the &lt;code&gt;Env&lt;&#x2F;code&gt; object. Note that environment variables are also &lt;strong&gt;case insensitive&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;env.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SHELL&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my_shrs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Hooks</title>
		<published>2021-05-01T08:00:00+00:00</published>
		<updated>2021-05-01T08:00:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/shell-config/hooks/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/shell-config/hooks/</id>
		<content type="html">&lt;p&gt;Hooks are a collection of predefined functions that &lt;strong&gt;shrs&lt;&#x2F;strong&gt; will call when
certain events occur. This lets you hook onto shell events and add your own
additional functionality.&lt;&#x2F;p&gt;
&lt;p&gt;Some examples include &lt;code&gt;startup&lt;&#x2F;code&gt; hook, which is great for printing a welcome
message and &lt;code&gt;after_command&lt;&#x2F;code&gt; hook which you can use to print out the exit status
of the last command.&lt;&#x2F;p&gt;
&lt;p&gt;An example usage of the &lt;code&gt;startup&lt;&#x2F;code&gt; hook.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;startup_msg &lt;&#x2F;span&gt;&lt;span&gt;= | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_sh&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Shell, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_sh_ctx&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; Context, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_sh_rt&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; Runtime, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ctx&lt;&#x2F;span&gt;&lt;span&gt;: StartupHookCtx | {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; welcome_str = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Welcome to my shell!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, welcome_str);
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; hooks = Hooks {
&lt;&#x2F;span&gt;&lt;span&gt;    startup: HookList::from_iter(vec![startup_msg]),
&lt;&#x2F;span&gt;&lt;span&gt;    ..Default::default()
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;myshell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_hooks&lt;&#x2F;span&gt;&lt;span&gt;(hooks);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hooks also have additional context that is passed as a parameter which you can
leverage. For a list of all the hooks and the context that is passed, please
refer to the rust docs.&lt;&#x2F;p&gt;
&lt;p&gt;Also notice that each type of hook actually takes in a list of hooks to run.
These hooks are ran in the order they are registered.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Prompt</title>
		<published>2021-05-01T08:00:00+00:00</published>
		<updated>2021-05-01T08:00:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/shell-config/prompt/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/shell-config/prompt/</id>
		<content type="html">&lt;h2 id=&quot;note-this-page-is-outdated&quot;&gt;NOTE: This page is outdated&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;will-be-updated-when-prompt-api-is-more-stable&quot;&gt;Will be updated when prompt API is more stable&lt;&#x2F;h3&gt;
&lt;p&gt;First define your own prompt and implement the &lt;code&gt;Prompt&lt;&#x2F;code&gt; trait.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;shrs::{Prompt, prompt::top_pwd};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;MyPrompt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Prompt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;MyPrompt {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;prompt_left&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;        format!(&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; &amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;top_pwd&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then add it when building the shell:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shrs&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shrs &quot;&gt;&lt;code class=&quot;language-shrs&quot; data-lang=&quot;shrs&quot;&gt;&lt;span&gt;let prompt = MyPrompt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;myshell.with_prompt(prompt);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;utility-functions&quot;&gt;Utility Functions&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;prompt&lt;&#x2F;code&gt; module comes with a variety of helpful functions for building the prompt. We can build a something that looks like the bash prompt with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;BashPrompt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Prompt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;BashPrompt {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;prompt_left&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;        format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;hostname&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;top_pwd&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Readline</title>
		<published>2021-05-01T08:00:00+00:00</published>
		<updated>2021-05-01T08:00:00+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/docs/shell-config/readline/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/docs/shell-config/readline/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;shrs&lt;&#x2F;strong&gt; comes with it&#x27;s own readline implementation that is just as
configurable and extensible as the core.&lt;&#x2F;p&gt;
&lt;p&gt;See the section on Line Configuration for details on all the configuration
options. To pass in your own configured readline to &lt;strong&gt;shrs&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; readline = LineBuilder::default()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;myshell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_readline&lt;&#x2F;span&gt;&lt;span&gt;(readline);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Aaran Xu</title>
		<published>2021-04-01T08:50:45+00:00</published>
		<updated>2021-04-01T08:50:45+00:00</updated>
		<link rel="alternate" href="https://mrpicklepinosaur.github.io/shrs/authors/aaran-xu/" type="text/html"/>
		<id>https://mrpicklepinosaur.github.io/shrs/authors/aaran-xu/</id>
		<content type="html">&lt;p&gt;Creator of &lt;strong&gt;AdiDoks&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aaranxu&quot;&gt;@aaranxu&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
